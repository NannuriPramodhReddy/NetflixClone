{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pramo\\\\Desktop\\\\netflix\\\\netflix-clone\\\\src\\\\pages\\\\MovieDetails.js\",\n  _s = $RefreshSig$();\n// src/pages/MovieDetails.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieById } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the movie ID from URL params\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(true); // Track loading state\n  const [error, setError] = useState(null); // Track error state\n\n  useEffect(() => {\n    const getMovieDetails = async () => {\n      try {\n        setLoading(true); // Set loading to true before fetching\n        setError(null); // Reset error state before fetching\n        const movieData = await fetchMovieById(id);\n        if (movieData) {\n          setMovie(movieData); // Set the movie data if found\n        } else {\n          setError('Movie not found'); // Handle case where no movie is found\n        }\n      } catch (error) {\n        setError('Error fetching movie details'); // Set error message in case of fetch failure\n      } finally {\n        setLoading(false); // Set loading to false after fetch completion\n      }\n    };\n    getMovieDetails(); // Fetch movie details on component mount\n  }, [id]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 23\n  }, this); // Show loading text while data is being fetched\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 21\n  }, this); // Show error message if something goes wrong\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Genre: \", movie.genre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Year: \", movie.year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: movie.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieDetails, \"pU1dk0VbvJFfyh0AloIB00BseKY=\", false, function () {\n  return [useParams];\n});\n_c = MovieDetails;\nexport default MovieDetails;\nvar _c;\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","fetchMovieById","jsxDEV","_jsxDEV","MovieDetails","_s","id","movie","setMovie","loading","setLoading","error","setError","getMovieDetails","movieData","children","fileName","_jsxFileName","lineNumber","columnNumber","title","genre","year","description","_c","$RefreshReg$"],"sources":["C:/Users/pramo/Desktop/netflix/netflix-clone/src/pages/MovieDetails.js"],"sourcesContent":["// src/pages/MovieDetails.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieById } from '../api';\r\n\r\nconst MovieDetails = () => {\r\n  const { id } = useParams();  // Get the movie ID from URL params\r\n  const [movie, setMovie] = useState(null);\r\n  const [loading, setLoading] = useState(true);  // Track loading state\r\n  const [error, setError] = useState(null);  // Track error state\r\n\r\n  useEffect(() => {\r\n    const getMovieDetails = async () => {\r\n      try {\r\n        setLoading(true);  // Set loading to true before fetching\r\n        setError(null);    // Reset error state before fetching\r\n        const movieData = await fetchMovieById(id);\r\n        if (movieData) {\r\n          setMovie(movieData);  // Set the movie data if found\r\n        } else {\r\n          setError('Movie not found');  // Handle case where no movie is found\r\n        }\r\n      } catch (error) {\r\n        setError('Error fetching movie details');  // Set error message in case of fetch failure\r\n      } finally {\r\n        setLoading(false);  // Set loading to false after fetch completion\r\n      }\r\n    };\r\n\r\n    getMovieDetails();  // Fetch movie details on component mount\r\n  }, [id]);\r\n\r\n  if (loading) return <p>Loading...</p>;  // Show loading text while data is being fetched\r\n  if (error) return <p>{error}</p>;  // Show error message if something goes wrong\r\n\r\n  return (\r\n    <div>\r\n      <h1>{movie.title}</h1>\r\n      <p>Genre: {movie.genre}</p>\r\n      <p>Year: {movie.year}</p>\r\n      <p>{movie.description}</p> {/* Assuming a description field in movie data */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,cAAc,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAE;EAC7B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;QACnBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAI;QACnB,MAAME,SAAS,GAAG,MAAMb,cAAc,CAACK,EAAE,CAAC;QAC1C,IAAIQ,SAAS,EAAE;UACbN,QAAQ,CAACM,SAAS,CAAC,CAAC,CAAE;QACxB,CAAC,MAAM;UACLF,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAE;QAChC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,8BAA8B,CAAC,CAAC,CAAE;MAC7C,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;IAEDG,eAAe,CAAC,CAAC,CAAC,CAAE;EACtB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAAY,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,CAAC,CAAE;EACxC,IAAIR,KAAK,EAAE,oBAAOR,OAAA;IAAAY,QAAA,EAAIJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,CAAC,CAAE;;EAEnC,oBACEhB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAKR,KAAK,CAACa;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtBhB,OAAA;MAAAY,QAAA,GAAG,SAAO,EAACR,KAAK,CAACc,KAAK;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BhB,OAAA;MAAAY,QAAA,GAAG,QAAM,EAACR,KAAK,CAACe,IAAI;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBhB,OAAA;MAAAY,QAAA,EAAIR,KAAK,CAACgB;IAAW;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACd,EAAA,CAtCID,YAAY;EAAA,QACDJ,SAAS;AAAA;AAAAwB,EAAA,GADpBpB,YAAY;AAwClB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}